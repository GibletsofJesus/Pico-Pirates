pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

space={}

function _init()
	for x=0,127 do
		local row={}
		for y=0,127 do
			add(row,1)
		end
		add(space,row)
	end
end

player={
	x=64,y=64,range=8,
	update=function(p)
		if (btn(0)) p.x-=1
		if (btn(1)) p.x+=1
		if (btn(2)) p.y-=1
		if (btn(3)) p.y+=1

		space[flr(p.x)][flr(p.y)]=0

		space[flr((p.x+1))][flr(p.y)]=0
		space[flr((p.x-1))][flr(p.y)]=0
		space[flr(p.x)][flr((p.y-1))]=0
		space[flr(p.x)][flr((p.y+1))]=0

				space[flr((p.x+1))][flr(p.y+1)]=0
				space[flr((p.x-1))][flr(p.y+1)]=0
				space[flr(p.x-1)][flr((p.y-1))]=0
				space[flr(p.x+1)][flr((p.y-1))]=0

		space[flr((p.x+2))][flr(p.y)]=0
		space[flr((p.x-2))][flr(p.y)]=0
		space[flr(p.x)][flr((p.y-2))]=0
		space[flr(p.x)][flr((p.y+2))]=0
	end,
	draw=function(p)
		pset(p.x,p.y,9)
	end
}

function _update()
	player.update(player)
end

function _draw()
	cls(0)
	map()
	for i=1,#space do
		for j=1,#space[i] do
			if (space[i][j]==1) circfill(i,j,0,12)
		end
	end
	player.draw(player)
	print("mEM USAGE: "..stat(0),0,1,1)
	print("mEM USAGE: "..stat(0),0,0,7)
	print("cPU USAGE: "..stat(1),0,9,1)
	print("cPU USAGE: "..stat(1),0,8,7)
end

--helper functions

shakeTimer=0
shakeAmount=4
shakeX=0 shakeY=0
function screenShake()
	if shakeTimer > 0 then
		shakeX=rnd(shakeAmount*2)-shakeAmount
		shakeY=rnd(shakeAmount*2)-shakeAmount
		shakeTimer-=0.33
	else
		shakeX=0 shakeY=0
	end
	camera(shakeX,shakeY)
end

function aabb_overlap(a,b)
	return ((a.x+a.w > b.x)
					and (a.x < b.x+b.w))
		and ((a.y+a.h > b.y)
					and (a.y < b.y+b.h))
end

function new_collider(_x,_y,_w,_h,_c)
	local col={
		x=_x,y=_y,w=_w,h=_h,c=_c,
		draw=function(c)
			rectfill(c.x,c.y,c.x+c.w,c.y+c.h,c.c)
		end
	}
	return col
end

function quicksort(a, lo, hi)
	if lo < hi then
		local p=partition(a,lo,hi)
		quicksort(a,lo,p)
		quicksort(a,p+1,hi)
	end
end

function partition(a, lo, hi)
	local pivot=a[lo]
	local i=lo
	local j=hi
	while true do
		while a[i] < pivot do
				i=i+1
		end
		while a[j] > pivot do
				j=j-1
		end
		if (i>=j) return j
		--swap entries
		local temp=a[i]
		a[i]=a[j]
		a[j]=temp
	end
end

function pal_all(c)
	for i=0,15 do
		pal(i,c)
	end
end

function lerp(a,b,t)
 return b*t+(a*(1-t))
end
__gfx__
00000000555111150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000551111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007005522bb110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000552bbb380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000d4bbbb880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700dbbbb3880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000dbbbb3880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000dddd48880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
